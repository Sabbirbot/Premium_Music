"""
Music Player V5 By Priyo
"""
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram.errors import MessageNotModified
from pyrogram import Client, emoji
from utils import mp, playlist
from config import Config

HELP = """
**M·¥á·¥ç ô·¥á Ä C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös:**
‚ö°/play **[s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á]/[ è·¥õ  ü…™…¥·¥ã]**: R·¥á·¥ò ü·¥Ä è T·¥è A…¥ A·¥ú·¥Ö…™·¥è F…™ ü·¥á.
‚ö°/dplay **[s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á]:** P ü·¥Ä è F Ä·¥è·¥ç D·¥á·¥á·¥¢·¥á Ä .
‚ö°/player:  C·¥ú Ä Ä·¥á…¥·¥õ S·¥è…¥…¢ S·¥õ·¥Ä·¥õ·¥ús.
‚ö°/upload: D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö C·¥ú Ä Ä·¥á…¥·¥õ S·¥è…¥…¢ W ú·¥Ä·¥õ P ü·¥Ä è…™…¥…¢.
‚ö°/help: H·¥á ü·¥ò C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö F·¥è Ä N·¥è·¥è ô.
‚ö°/playlist: V…™·¥á·¥° P ü·¥Ä è ü…™s·¥õ.

**A·¥Ö·¥ç…™…¥ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö:**
‚ö°/skip: S·¥ã…™·¥ò C·¥ú Ä Ä·¥á…¥·¥õ S·¥è…¥…¢
‚ö°/cplay: P ü·¥Ä è M·¥ús…™·¥Ñ F·¥è Ä C ú·¥Ä…¥…¥·¥á ü.
‚ö°/yplay: P ü·¥Ä è M·¥ús…™·¥Ñ F Ä·¥è·¥ç YT P ü·¥Ä è ü…™s·¥õ.
‚ö°/join: J·¥è…™…¥ V·¥è…™·¥Ñ·¥á C ú·¥Ä·¥õ N·¥è·¥è ô.
‚ö°/leave: K…™·¥Ñ·¥ã F Ä·¥è·¥ç V·¥è…™·¥Ñ·¥á C ú·¥Ä·¥õ.
‚ö°/shuffle: R·¥Ä…¥·¥Ö·¥è·¥ç P ü·¥Ä è ü…™s·¥õ.
‚ö°/vc: C ú·¥á·¥Ñ·¥ã Us·¥á Ä ô·¥è·¥õ S·¥õ·¥Ä·¥õ·¥ús.
‚ö°/stop: S·¥õ·¥è·¥ò M·¥ús…™·¥Ñ.
‚ö°/radio: S·¥õ·¥Ä Ä·¥õ R·¥Ä·¥Ö…™·¥è.
‚ö°/stopradio: S·¥õ·¥è·¥ò R·¥Ä·¥Ö…™·¥è.
‚ö°/clearplaylist: C ü·¥á·¥Ä Ä P ü·¥Ä è ü…™s·¥õ.
‚ö°/export: Ex·¥ò·¥è Ä·¥õ C·¥ú Ä Ä·¥á…¥·¥õ P ü·¥Ä è ü…™s·¥õ.
‚ö°/import: I·¥ç·¥ò·¥è Ä·¥õ P Ä·¥á·¥†…™·¥è·¥ús P ü·¥Ä è ü…™s·¥õ.
‚ö°/replay: P ü·¥Ä è A…¢·¥Ä…™…¥.
‚ö°/clean: R·¥á·¥ç·¥è·¥†·¥á U…¥·¥ús·¥á·¥Ö F…™ ü·¥ás.
‚ö°/pause: P·¥Ä·¥ús·¥á P ü·¥Ä è…™…¥…¢.
‚ö°/resume: R·¥ás·¥ú·¥ç·¥á P ü·¥Ä è…™…¥…¢.
‚ö°/volume: C ú·¥Ä…¥…¢·¥á M·¥è·¥è·¥Ö(0-200).
‚ö°/mute: M·¥ú·¥õ·¥á V·¥è…™·¥Ñ·¥áC ú·¥Ä·¥õ.
‚ö°/unmute: U…¥·¥ç·¥ú·¥õ·¥á V·¥è…™·¥Ñ·¥áC ú·¥Ä·¥õ.
‚ö°/restart: R·¥ás·¥õ·¥Ä Ä·¥õ B·¥è·¥õ.
"""


@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.from_user.id not in Config.ADMINS and query.data != "help":
        await query.answer(
            "W ú è B Ä·¥ú ú?, N…™·¥ä·¥á E·¥ã·¥õ·¥Ä B·¥è·¥õ B·¥Ä…¥…™ è·¥á T·¥Ä Ä·¥ò·¥è Ä S·¥ã…™·¥ò K·¥è Ä·¥á…¥ üôÇ",
            show_alert=True
            )
        return
    else:
        await query.answer()
    if query.data == "replay":
        group_call = mp.group_call
        if not playlist:
            return
        group_call.restart_playout()
        if not playlist:
            pl = f"{emoji.NO_ENTRY} Empty Playlist"
        else:
            pl = f"{emoji.PLAY_BUTTON} **Playlist**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n   üéµ**Requested by:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        await query.edit_message_text(
                f"{pl}",
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("üîÑ", callback_data="replay"),
                            InlineKeyboardButton("‚èØ", callback_data="pause"),
                            InlineKeyboardButton("‚è©", callback_data="skip")
                            
                        ],
                    ]
                )
            )

    elif query.data == "pause":
        if not playlist:
            return
        else:
            mp.group_call.pause_playout()
            pl = f"{emoji.PLAY_BUTTON} **Playlist**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n   üéµ**Requested by:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        await query.edit_message_text(f"{emoji.PLAY_OR_PAUSE_BUTTON} Paused\n\n{pl}",
        reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("üîÑ", callback_data="replay"),
                            InlineKeyboardButton("‚èØ", callback_data="resume"),
                            InlineKeyboardButton("‚è©", callback_data="skip")
                            
                        ],
                    ]
                )
            )

    
    elif query.data == "resume":   
        if not playlist:
            return
        else:
            mp.group_call.resume_playout()
            pl = f"{emoji.PLAY_BUTTON} **Playlist**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n   üéµ**Requested by:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        await query.edit_message_text(f"{emoji.PLAY_OR_PAUSE_BUTTON} Resumed\n\n{pl}",
        reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton("üîÑ", callback_data="replay"),
                            InlineKeyboardButton("‚èØ", callback_data="pause"),
                            InlineKeyboardButton("‚è©", callback_data="skip")
                            
                        ],
                    ]
                )
            )

    elif query.data=="skip":   
        if not playlist:
            return
        else:
            await mp.skip_current_playing()
            pl = f"{emoji.PLAY_BUTTON} **Playlist**:\n" + "\n".join([
                f"**{i}**. **{x[1]}**\n   üéµ**Requested by:** {x[4]}"
                for i, x in enumerate(playlist)
                ])
        try:
            await query.edit_message_text(f"{emoji.PLAY_OR_PAUSE_BUTTON} Skipped\n\n{pl}",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton("üîÑ", callback_data="replay"),
                        InlineKeyboardButton("‚èØ", callback_data="pause"),
                        InlineKeyboardButton("‚è©", callback_data="skip")
                            
                    ],
                ]
            )
        )
        except:
            pass
    elif query.data=="help":
        buttons = [
            [
                InlineKeyboardButton("S·¥è·¥ú Ä·¥Ñ·¥á C·¥è·¥Ö·¥á", url='https://github.com/PriyoKhan777/Premium_Music'),
            ],
            [
               InlineKeyboardButton('S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò', url='https://t.me/premiumappsaccountfree'),
               InlineKeyboardButton('A·¥Ö·¥Ö·¥Ä G Ä·¥è·¥ú·¥ò', url='https://t.me/unknownfriends1'),
            ],
            [
               InlineKeyboardButton('', url='https://github.com/itspriyo'),
        
            ]
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(
            HELP,
            reply_markup=reply_markup

        )

